/*! @file 	ZclHomeAutomation.h
 *
 * @brief	Types, definitions and prototypes for the for the Home Automation domain: Appliance Identification,
 * 			Meter Identification, Appliance Events and Alerts, Appliance Statistics.
 *
 * @copyright Copyright(c) 2013, Freescale, Inc. All rights reserved.
 *
 * @license	Redistribution and use in source and binary forms, with or without modification,
 *			are permitted provided that the following conditions are met:
 *
 *			o Redistributions of source code must retain the above copyright notice, this list
 *			of conditions and the following disclaimer.
 *
 *			o Redistributions in binary form must reproduce the above copyright notice, this
 *			list of conditions and the following disclaimer in the documentation and/or
 *			other materials provided with the distribution.
 *
 *			o Neither the name of Freescale Semiconductor, Inc. nor the names of its
 *			contributors may be used to endorse or promote products derived from this
 *			software without specific prior written permission.
 *
 *			THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *			ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *			WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 *			DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
 *			ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 *			(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 *			LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 *			ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 *			(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 *			SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
 
/* 
 *  [R1] - 053520r16ZB_HA_PTG-Home-Automation-Profile.pdf
 *  [R2] - docs-07-5123-04-0afg-zigbee-cluster-library-specification.pdf
*/
#ifndef _ZCL_HomeAutomation_H
#define _ZCL_HomeAutomation_H

#include "AfApsInterface.h"
#include "AppAfInterface.h"
#include "BeeStackInterface.h"
#include "ZCL.h"
#include "ZclPartition.h"

/******************************************************************************
*******************************************************************************
* Public macros and data types definitions.
*******************************************************************************
******************************************************************************/

#if gZclEnableApplianceStatistics_d
/******************************************
	Appliance Statistics Cluster
  See Zigbee Home Automation profile 1.2(053520r29) Section 9.11 [R1]
*******************************************/
#if ( TRUE == gBigEndian_c )
#define gZclAttrApplianceStatisticsLogMaxSize_c				0x0000    /* M - Log max size*/
#define gZclAttrApplianceStatisticsLogQueueMaxSize_c		0x0100    /* M - Log queue max size*/
#else
#define gZclAttrApplianceStatisticsLogMaxSize_c				0x0000    /* M - Log max size*/
#define gZclAttrApplianceStatisticsLogQueueMaxSize_c		0x0001    /* M - Log queue max size*/
#endif

#define gZclAttrSetApplianceStatisticsInformation_c			0x00
/* Appliance Statistics Attributes Sets */
#define gZclAttrApplianceStatisticsLogMaxSizeId_c			0x00    /* M - Log max size*/
#define gZclAttrApplianceStatisticsLogQueueMaxSizeId_c		0x01    /* M - Log queue max size*/


/* [R1] 9.11.2.2 Commands Generated by the ApplianceStatistics Server */
#define gZclCmdApplianceStatistics_LogNotification_c		0x00    /* M - log notification */
#define gZclCmdApplianceStatistics_LogResponse_c			0x01    /* M - log response */
#define gZclCmdApplianceStatistics_LogQueueResponse_c		0x02    /* M - log queue response */
#define gZclCmdApplianceStatistics_StatisticsAvailable_c	0x03    /* M - statistics available */ 

/* [R1] 9.11.3.2 Commands Generated by the ApplianceStatistics Client */
#define gZclCmdApplianceStatistics_LogReq_c					0x00    /* M - log request */
#define gZclCmdApplianceStatistics_LogQueueReq_c			0x01    /* M - log queue request */


#define gApplianceStatistics_PayloadLogMaxSize_c			0x46 /* maximum size of a log payload in normal condition. If payload is greater - commands should be transferred using the Partition cluster*/

/* default values for WhiteGoods application: */
#define gApplianceStatistics_MaxLogId_c							0x08 /* maximum number of Log Id supported */
#define gApplianceStatistics_LogsFittingInSinglePacketLength_c  0x20 /* size of a log payload - fitting into a single packet */
#define gApplianceStatistics_LogsWithPartitionLength1_c  		0x49 /* size of a log payload - using partition cluster */ 
#define gApplianceStatistics_LogsWithPartitionLength2_c  		4096 /* size of a log payload - using partition cluster */  


typedef PACKED_STRUCT zclApplianceStatisticsAttrsRAM_tag
{
  uint32_t    logMaxSize; 
  uint8_t     logQueueMaxSize;
} zclApplianceStatisticsAttrsRAM_t;

/* struct that contain log information - used for application */
typedef PACKED_STRUCT zclApplianceStatistics_LogInf_tag
{
  uint32_t logId; 
  uint32_t length;
  uint32_t address;
}zclApplianceStatistics_LogInf_t;

/* payload format for Log notification and log response  commands*/
typedef PACKED_STRUCT zclCmdApplianceStatistics_LogRspOrNotif_tag 
{
 uint32_t  TimeStamp;
 uint32_t  LogID;
 uint32_t  LogLength;
 uint8_t   LogPayload[1]; 
}zclCmdApplianceStatistics_LogRspOrNotif_t; 

/* [R1] 9.11.2.2.1 LogNotification and 9.11.2.2.2 LogResponse Commands */
typedef PACKED_STRUCT zclApplianceStatistics_LogRspOrNotif_tag 
{
   afAddrInfo_t                              addrInfo;
   uint8_t                                   zclTransactionId;
   zclCmdApplianceStatistics_LogRspOrNotif_t cmdFrame;
}zclApplianceStatistics_LogRspOrNotif_t; 

/* payload format for Log queue response and statistics available commands */
typedef PACKED_STRUCT zclCmdApplianceStatistics_LogQueueResponse_tag 
{
 uint8_t   LoqQueueSize;
 uint32_t  LogID[1];
}zclCmdApplianceStatistics_LogQueueResponse_t; 

/* [R1] 9.11.2.2.3 LogQueueResponse and 9.11.2.2.4 StatisticsAvailable */
typedef PACKED_STRUCT zclApplianceStatistics_LogQueueResponse_tag 
{
   afAddrInfo_t                                 addrInfo;
   uint8_t                                      zclTransactionId;
   zclCmdApplianceStatistics_LogQueueResponse_t cmdFrame;
}zclApplianceStatistics_LogQueueResponse_t; 

/* payload format for Log request command */
typedef PACKED_STRUCT zclCmdApplianceStatistics_LogReq_tag 
{
 uint32_t  LogID;
}zclCmdApplianceStatistics_LogReq_t; 

/* [R1] 9.11.3.2.1 LogRequest Command */
typedef PACKED_STRUCT zclApplianceStatistics_LogReq_tag 
{
   afAddrInfo_t                           addrInfo;
   uint8_t                                zclTransactionId;
   zclCmdApplianceStatistics_LogReq_t     cmdFrame;
}zclApplianceStatistics_LogReq_t; 

/* [R1] 9.11.3.2.2 LogQueueRequest Command */
typedef PACKED_STRUCT zclApplianceStatistics_LogQueueReq_tag
{
  afAddrInfo_t      addrInfo;  
  uint8_t           zclTransactionId;
  /* no payload, just the command */
} zclApplianceStatistics_LogQueueReq_t;


#if gZclEnablePartition_d
/* used for partition cluster */
#if ( TRUE == gBigEndian_c )
#define gMaxPartitionBuffer 0x0015
#else
#define gMaxPartitionBuffer 0x1500
#endif

typedef PACKED_STRUCT ApplianceStatisticsPartitionTxFrameBuffer_tag 
{
  uint8_t *nextBuffer;
  uint32_t bufferLen;
  union 
  {
    uint8_t data[1];
    zclFrame_t zclHeader;
  } payload;
}ApplianceStatisticsPartitionTxFrameBuffer_t;


typedef PACKED_STRUCT ApplianceStatisticsPartitionRxFrameBuffer_tag 
{
  bool_t framePending;
  uint8_t zclTransactionId;
  zclCmdApplianceStatistics_LogRspOrNotif_t data;
  uint32_t totalLen;
} ApplianceStatisticsPartitionRxFrameBuffer_t;
#endif /* gZclEnablePartition_d */

#endif /*gZclEnableApplianceStatistics_d */




#if gZclEnableApplianceEventsAlerts_d
/******************************************
	Appliance Events and Alerts Cluster
  See Zigbee Home Automation profile 1.2(053520r29) Section 9.10 [R1]
*******************************************/

/* [R1] 9.10.2.3 Commands Received */
#define gZclCmdApplianceEventsAlerts_GetAlerts_c                      0x00    /* M - Get Alerts */    
/* [R1] 9.11.2.4 Commands Generated */
#define gZclCmdApplianceEventsAlerts_GetAlertsResponse_c              0x00    /* M - Get Alerts Response */
#define gZclCmdApplianceEventsAlerts_AlertsNotification_c             0x01    /* M - Alerts Notification */
#define gZclCmdApplianceEventsAlerts_EventNotification_c              0x02    /* M - Event Notification */


#define gApplEventsAlerts_MaxAlertsSupported_c  0x01 /* max alerts supported <= 0xF*/

#if ( TRUE == gBigEndian_c )
#define gApplianceAllertsEvent_AlarmIdMask_c            0xFF000000
#define gApplianceAllertsEvent_CategoryMask_c           0x000F0000
#define gApplianceAllertsEvent_PresenceRecoveryMask_c   0x00300000
#else
#define gApplianceAllertsEvent_AlarmIdMask_c            0x000000FF
#define gApplianceAllertsEvent_CategoryMask_c           0x00000F00
#define gApplianceAllertsEvent_PresenceRecoveryMask_c   0x00003000
#endif



/* [R1] 9.10.2.3.1 Get Alerts Command */
typedef PACKED_STRUCT zclApplianceEventsAlerts_GetAlerts_tag 
{
   afAddrInfo_t                              addrInfo;
   uint8_t                                   zclTransactionId;
   /* no payload, just the command */
}zclApplianceEventsAlerts_GetAlerts_t; 


/* Alerts Count - Organization ([R1] Table 9.57) */
typedef struct zclApplAlertsEvents_AlertsCount_tag
{
 unsigned AlertsNumber        : 4;  /* Number Of alerts  */
 unsigned AlertType           : 4;  /* Type of Alert: 0x0 - Unstructured, 0x1..0xF - reserved */	
}zclApplAlertsEvents_AlertsCount_t;  

/* Alerts Structure - Organization ([R1] Table 9.58) */
typedef PACKED_STRUCT zclApplAlertsEvents_AlertsStructure_tag
{
	
 uint8_t   AlertsId;                 /* Alert Id : 0x0      - reserved
                                                   1..63    - standardised
                                                   64..127  - non-standardised
                                                   128..255 - proprietary */
 unsigned Category          : 4;    /* Category: 0x0 - Reserved, 
                                                  0x1 - Warning, 
                                                  0x2 - Danger, 
                                                  0x3 - Failure,
                                                  0x4..0xF -reserved */
 unsigned PresenceRecovery   : 2;   /* Presence Recovery: 0x0 - Presence, 0x1 - Recovery, 0x2..0x3 - reserved */
 unsigned Reserved           : 2;   /* Bit 14 and Bit 15 - reserved (set to 0x0) */
 uint8_t   Proprietary;               /* Non-standardised or proprietary */
}zclApplAlertsEvents_AlertsStructure_t;  


#define gApplAlertsEvents_Warning_d     0x01
#define gApplAlertsEvents_Danger_d      0x02
#define gApplAlertsEvents_Failure_d     0x03

#define gApplAlertsEvents_Presence_d    0x00
#define gApplAlertsEvents_Recovery_d    0x01

/* payload format for get alerts response command ([R1] Table 9.56) */
typedef PACKED_STRUCT zclCmdApplianceEventsAlerts_GetAlertsRsp_tag 
{
 zclApplAlertsEvents_AlertsCount_t      AlertsCount;
 zclApplAlertsEvents_AlertsStructure_t  AlertsStructure[1];
}zclCmdApplianceEventsAlerts_GetAlertsRsp_t; 

/* [R1] 9.10.2.4.1 Get Alerts Response Command and 9.10.2.4.2 Alert Notification Command */
typedef PACKED_STRUCT zclApplianceEventsAlerts_GetAlertsRsp_tag 
{
   afAddrInfo_t                               addrInfo;
   uint8_t                                    zclTransactionId;
   zclCmdApplianceEventsAlerts_GetAlertsRsp_t cmdFrame;
}zclApplianceEventsAlerts_GetAlertsRsp_t; 

/* payload format for event notification command ([R1] Table 9.60) */
typedef PACKED_STRUCT zclCmdApplianceEventsAlerts_EventNotif_tag 
{
 uint8_t  EventHeader;            /* reserved field set to 0 */
 uint8_t  EventIdentification;    /* 0..63    - Standardised, 
                                     64..127  - Non-standardised, 
                                     128..255 - Proprietary (except value 0xF7)*/
}zclCmdApplianceEventsAlerts_EventNotif_t; 

/* event identification ([R1] Table 9.61) */
enum{
  gApplianceEventIdentification_EndOfCycle_c   = 0x01, /* end of the working cycle reached */
  gApplianceEventIdentification_Reserved1_c    = 0x02, /* reserved */
  gApplianceEventIdentification_Reserved2_c    = 0x03, /* reserved */
  gApplianceEventIdentification_TempReached_c  = 0x04, /* Set Temperature Reached */
  gApplianceEventIdentification_EndOfCooking_c = 0x05, /* End of cooking process */
  gApplianceEventIdentification_SwitchingOff_c = 0x06, /* Switching OFF */
  gApplianceEventIdentification_WrongData_c    = 0x07  /* Wrong Data */
};

/* [R1] 9.10.2.4.3  Event Notification Command */
typedef PACKED_STRUCT zclApplianceEventsAlerts_EventNotif_tag 
{
   afAddrInfo_t                             addrInfo;
   uint8_t                                  zclTransactionId;
   zclCmdApplianceEventsAlerts_EventNotif_t cmdFrame;
}zclApplianceEventsAlerts_EventNotif_t; 

#endif /* gZclEnableApplianceEventsAlerts_d */




#if gZclEnableApplianceIdentification_d
/******************************************
	Appliance Identification Cluster
  See Zigbee Home Automation profile 1.2(053520r29) Section 9.8 [R1]
*******************************************/
/* Appliance Identification Attributes Sets ([R1] - Table 9.44) */
#if ( TRUE == gBigEndian_c )
/* 9.8.3.2 Basic Appliance Identification Attribute Set*/
#define gZclAttrApplianceIdentification_BasicIdentification_c           0x0000   /* M - Basic Appliance Identification */
/* 9.8.3.4 Extended Appliance Identification Attribute Set*/
#define gZclAttrApplianceIdentification_CompanyName_c                   0x1000   /* O - Company Name */
#define gZclAttrApplianceIdentification_CompanyId_c                     0x1100   /* O - Company Id */
#define gZclAttrApplianceIdentification_BrandName_c                     0x1200   /* O - Brand Name */
#define gZclAttrApplianceIdentification_BrandId_c                       0x1300   /* O - Brand Id */
#define gZclAttrApplianceIdentification_Model_c                         0x1400   /* O - Model */
#define gZclAttrApplianceIdentification_PartNumber_c                    0x1500   /* O - PartNumber */
#define gZclAttrApplianceIdentification_ProductRevision_c               0x1600   /* O - Product Revision */
#define gZclAttrApplianceIdentification_SoftwareRevision_c              0x1700   /* O - Software Revision */
#define gZclAttrApplianceIdentification_ProductTypeName_c               0x1800   /* O - Product Type Name */
#define gZclAttrApplianceIdentification_ProductTypeId_c                 0x1900   /* O - Product Type Id */
#define gZclAttrApplianceIdentification_CECEDSpecificationVersion_c     0x1A00   /* O - CECED Specification Version */
#else
//* 9.8.3.2 Basic Appliance Identification Attribute Set*/
#define gZclAttrApplianceIdentification_BasicIdentification_c           0x0000   /* M - Basic Appliance Identification */
/* 9.8.3.4 Extended Appliance Identification Attribute Set*/
#if gZclClusterOptionals_d
#define gZclAttrApplianceIdentification_CompanyName_c                   0x0010   /* O - Company Name */
#define gZclAttrApplianceIdentification_CompanyId_c                     0x0011   /* O - Company Id */
#define gZclAttrApplianceIdentification_BrandName_c                     0x0012   /* O - Brand Name */
#define gZclAttrApplianceIdentification_BrandId_c                       0x0013   /* O - Brand Id */
#define gZclAttrApplianceIdentification_Model_c                         0x0014   /* O - Model */
#define gZclAttrApplianceIdentification_PartNumber_c                    0x0015   /* O - PartNumber */
#define gZclAttrApplianceIdentification_ProductRevision_c               0x0016   /* O - Product Revision */
#define gZclAttrApplianceIdentification_SoftwareRevision_c              0x0017   /* O - Software Revision */
#define gZclAttrApplianceIdentification_ProductTypeName_c               0x0018   /* O - Product Type Name */
#define gZclAttrApplianceIdentification_ProductTypeId_c                 0x0019   /* O - Product Type Id */
#define gZclAttrApplianceIdentification_CECEDSpecVersion_c              0x001A   /* O - CECED Specification Version */
#endif /* gZclClusterOptionals_d */
#endif


#define gZclAttrApplianceIdentification_BasicSet_c           0x00   /* Basic Appliance Identification Set*/
#define gZclAttrApplianceIdentification_ExtendedSet_c        0x01   /* Extended Appliance Set*/


/* 9.8.3.2 Basic Appliance Identification Attribute Set*/
#define gZclAttrIdApplianceIdentification_BasicIdentification_c           0x00   /* M - Basic Appliance Identification */
/* 9.8.3.4 Extended Appliance Identification Attribute Set*/
#if gZclClusterOptionals_d
#define gZclAttrIdApplianceIdentification_CompanyName_c                   0x10   /* O - Company Name */
#define gZclAttrIdApplianceIdentification_CompanyId_c                     0x11   /* O - Company Id */
#define gZclAttrIdApplianceIdentification_BrandName_c                     0x12   /* O - Brand Name */
#define gZclAttrIdApplianceIdentification_BrandId_c                       0x13   /* O - Brand Id */
#define gZclAttrIdApplianceIdentification_Model_c                         0x14   /* O - Model */
#define gZclAttrIdApplianceIdentification_PartNumber_c                    0x15   /* O - PartNumber */
#define gZclAttrIdApplianceIdentification_ProductRevision_c               0x16   /* O - Product Revision */
#define gZclAttrIdApplianceIdentification_SoftwareRevision_c              0x17   /* O - Software Revision */
#define gZclAttrIdApplianceIdentification_ProductTypeName_c               0x18   /* O - Product Type Name */
#define gZclAttrIdApplianceIdentification_ProductTypeId_c                 0x19   /* O - Product Type Id */
#define gZclAttrIdApplianceIdentification_CECEDSpecVersion_c              0x1A   /* O - CECED Specification Version */
#endif

#if TRUE != gBigEndian_c
#define  gApplIdentifAttr_CompanyId_c  0x4652   /* 'F'+'R' */
#else
#define  gApplIdentifAttr_CompanyId_c  0x5246   /* 'F'+'R' */
#endif


typedef PACKED_STRUCT zclApplIdentification_BasicIdentif_tag
{
  uint16_t  companyId;      /* companyId */
  uint16_t  brandId;        /* brandId */
  uint16_t  productTypeId;  /* productTypeId*/
  uint8_t   specVersion;    /* specVersion*/
}zclApplIdentification_BasicIdentif_t;

typedef PACKED_STRUCT zclApplIdentificationAttrsRAM_tag
{
  zclApplIdentification_BasicIdentif_t basicIdentification;
#if gZclClusterOptionals_d  
  zclStr16_t    companyName;
  uint16_t      companyId;
  zclStr16_t    brandName;
  uint16_t      brandId;
  zclStr16Oct_t model;
  zclStr16Oct_t partNumber;
  zclStr6Oct_t  productRevision;
  zclStr6Oct_t  softwareRevision;
  zclStr2Oct_t  productTypeName;
  uint16_t      productTypeId;
  uint8_t       cecedSpecVersion;
#endif  
}zclApplIdentificationAttrsRAM_t;


/* Product type - */
#if ( TRUE == gBigEndian_c )  

#define    gApplIdentif_ProducTypeId_WhiteGoods_c    		0x0000
#define    gApplIdentif_ProducTypeId_Dishwasher_c           0x0156
#define    gApplIdentif_ProducTypeId_TumbleDryer_c          0x0256
#define    gApplIdentif_ProducTypeId_WasherDryer_c          0x0356
#define    gApplIdentif_ProducTypeId_WashingMachine_c       0x0456
#define    gApplIdentif_ProducTypeId_Hobs_c                 0x035E
#define    gApplIdentif_ProducTypeId_InductionHobs_c        0x095E
#define    gApplIdentif_ProducTypeId_Oven_c                 0x015E
#define    gApplIdentif_ProducTypeId_ElectricalOven_c       0x065E
#define    gApplIdentif_ProducTypeId_RefrigeratorFreezer_c  0x0166

#else
#define    gApplIdentif_ProducTypeId_WhiteGoods_c    		0x0000
#define    gApplIdentif_ProducTypeId_Dishwasher_c           0x5601
#define    gApplIdentif_ProducTypeId_TumbleDryer_c          0x5602
#define    gApplIdentif_ProducTypeId_WasherDryer_c          0x5603
#define    gApplIdentif_ProducTypeId_WashingMachine_c       0x5604
#define    gApplIdentif_ProducTypeId_Hobs_c                 0x5E03
#define    gApplIdentif_ProducTypeId_InductionHobs_c        0x5E09
#define    gApplIdentif_ProducTypeId_Oven_c                 0x5E01
#define    gApplIdentif_ProducTypeId_ElectricalOven_c       0x5E06
#define    gApplIdentif_ProducTypeId_RefrigeratorFreezer_c  0x6601

#endif

enum{
  gApplIdentif_CecedSpecVersion_CompliantV1_0_NotCert_c  = 0x10,
  gApplIdentif_CecedSpecVersion_CompliantV1_0_Cert_c     = 0x1A
};

#endif /* gZclEnableApplianceIdentification_d */




#if gZclEnableMeterIdentification_d
/******************************************
	Meter Identification Cluster
  See Zigbee Home Automation profile 1.2(053520r29) Section 9.9 [R1]
*******************************************/
/* Meter Identification Attributes Sets ([R1] - Table 9.50) */
#if ( TRUE == gBigEndian_c )
/* 9.9.3.2 Meter Identification Attribute Set*/
#define gZclAttrMeterIdentification_CompanyName_c           0x0000   /* M - Company Name */
#define gZclAttrMeterIdentification_MeterTypeId_c           0x0100   /* M - Meter Type Id */
#define gZclAttrMeterIdentification_DataQualityId_c         0x0400   /* M - Data Quality Id */
#if gZclClusterOptionals_d
#define gZclAttrMeterIdentification_CustomerName_c          0x0500   /* O - Customer Name */
#define gZclAttrMeterIdentification_Model_c                 0x0600   /* O - Model */
#define gZclAttrMeterIdentification_PartNumber_c            0x0700   /* O - Part Number */
#define gZclAttrMeterIdentification_ProductRevision_c       0x0800   /* O - Product Revision */
#define gZclAttrMeterIdentification_SoftwareRevision_c      0x0A00   /* O - Software Revision */
#define gZclAttrMeterIdentification_UtilityName_c           0x0B00   /* O - Utility Name */
#endif //gZclClusterOptionals_d
#define gZclAttrMeterIdentification_POD_c                   0x0C00   /* M - POD */
#define gZclAttrMeterIdentification_AvailablePower_c        0x0D00   /* M - Available Power */
#define gZclAttrMeterIdentification_PowerThreshold_c        0x0E00   /* M - Power Threshold */
#else
/* 9.9.3.2 Meter Identification Attribute Set*/
#define gZclAttrMeterIdentification_CompanyName_c           0x0000   /* M - Company Name */
#define gZclAttrMeterIdentification_MeterTypeId_c           0x0001   /* M - Meter Type Id */
#define gZclAttrMeterIdentification_DataQualityId_c         0x0004   /* M - Data Quality Id */
#if gZclClusterOptionals_d
#define gZclAttrMeterIdentification_CustomerName_c          0x0005   /* O - Customer Name */
#define gZclAttrMeterIdentification_Model_c                 0x0006   /* O - Model */
#define gZclAttrMeterIdentification_PartNumber_c            0x0007   /* O - Part Number */
#define gZclAttrMeterIdentification_ProductRevision_c       0x0008   /* O - Product Revision */
#define gZclAttrMeterIdentification_SoftwareRevision_c      0x000A   /* O - Software Revision */
#define gZclAttrMeterIdentification_UtilityName_c           0x000B   /* O - Utility Name */
#endif //gZclClusterOptionals_d
#define gZclAttrMeterIdentification_POD_c                   0x000C   /* M - POD */
#define gZclAttrMeterIdentification_AvailablePower_c        0x000D   /* M - Available Power */
#define gZclAttrMeterIdentification_PowerThreshold_c        0x000E   /* M - Power Threshold */
#endif 


#define gZclAttMeterIdentification_Set_c           0x00   /* Meter Identification Set*/

/* 9.9.3.2 Meter Identification Attribute Set*/
#define gZclAttrIdMeterIdentification_CompanyName_c           0x00   /* M - Company Name */
#define gZclAttrIdMeterIdentification_MeterTypeId_c           0x01   /* M - Meter Type Id */
#define gZclAttrIdMeterIdentification_DataQualityId_c         0x04   /* M - Data Quality Id */
#if gZclClusterOptionals_d
#define gZclAttrIdMeterIdentification_CustomerName_c          0x05   /* O - Customer Name */
#define gZclAttrIdMeterIdentification_Model_c                 0x06   /* O - Model */
#define gZclAttrIdMeterIdentification_PartNumber_c            0x07   /* O - Part Number */
#define gZclAttrIdMeterIdentification_ProductRevision_c       0x08   /* O - Product Revision */
#define gZclAttrIdMeterIdentification_SoftwareRevision_c      0x0A   /* O - Software Revision */
#define gZclAttrIdMeterIdentification_UtilityName_c           0x0B   /* O - Utility Name */
#endif //gZclClusterOptionals_d
#define gZclAttrIdMeterIdentification_POD_c                   0x0C   /* M - POD */
#define gZclAttrIdMeterIdentification_AvailablePower_c        0x0D   /* M - Available Power */
#define gZclAttrIdMeterIdentification_PowerThreshold_c        0x0E   /* M - Power Threshold */


typedef int8_t powerType_t[3];


typedef PACKED_STRUCT zclMeterIdentificationAttrsRAM_tag
{
  zclStr16_t    companyName;
  uint16_t      meterTypeId;
  uint16_t      dataQualityId;
#if gZclClusterOptionals_d  
  zclStr16_t    customerName;
  zclStr16Oct_t model;
  zclStr16Oct_t partNumber;
  zclStr6Oct_t  productRevision;
  zclStr6Oct_t  softwareRevision;
  zclStr16_t    utilityName;
#endif  
  zclStr16_t    pointOfDelivery;
  powerType_t   availablePower;
  powerType_t   powerThreshold;
}zclMeterIdentificationAttrsRAM_t;



/* Meter Type Id attribute -  [R1] - table 9.52*/
#if ( TRUE == gBigEndian_c )  
#define  gMeterIdentif_MeterTypeId_UtilityPrimaryMeter_c            0x0000
#define  gMeterIdentif_MeterTypeId_UtilityProductionMeter_c         0x0100
#define  gMeterIdentif_MeterTypeId_UtilitySecondaryMeter_c          0x0200
#define  gMeterIdentif_MeterTypeId_PrivatePrimaryMeter_c            0x0001
#define  gMeterIdentif_MeterTypeId_PrivatePrroductionMeter_c        0x0101
#define  gMeterIdentif_MeterTypeId_PrivateSecondaryMeter_c          0x0201 
#define  gMeterIdentif_MeterTypeId_GenericMeter_c                   0x1001
#else
#define  gMeterIdentif_MeterTypeId_UtilityPrimaryMeter_c            0x0000
#define  gMeterIdentif_MeterTypeId_UtilityProductionMeter_c         0x0001
#define  gMeterIdentif_MeterTypeId_UtilitySecondaryMeter_c          0x0002
#define  gMeterIdentif_MeterTypeId_PrivatePrimaryMeter_c            0x0100
#define  gMeterIdentif_MeterTypeId_PrivatePrroductionMeter_c        0x0101
#define  gMeterIdentif_MeterTypeId_PrivateSecondaryMeter_c          0x0102 
#define  gMeterIdentif_MeterTypeId_GenericMeter_c                   0x0110
#endif

/* Data Quality Id attribute -  [R1] - table 9.53*/
enum{
  gMeterIdentif_DataQualityId_AllDataCertified_c  = 0x0000,
  gMeterIdentif_DataQualityId_OnlyInstantaneousPwrCertified_c,
  gMeterIdentif_DataQualityId_OnlyCumulatedConsumptionNotCertified_c,
  gMeterIdentif_DataQualityId_NotCertifiedData_c
};


#endif /* gZclEnableMeterIdentification_d */




/******************************************************************************
*******************************************************************************
* Public functions prototypes
*******************************************************************************
******************************************************************************/
#if gZclEnableApplianceStatistics_d
/*!
 * @fn 		zbStatus_t ZCL_ApplianceStatisticsClusterServer(zbApsdeDataIndication_t *pIndication, afDeviceDef_t *pDevice)
 *
 * @brief	Processes the requests received on the ApplianceStatistics Cluster Server. 
 *
 */
zbStatus_t ZCL_ApplianceStatisticsClusterServer(zbApsdeDataIndication_t *pIndication, afDeviceDef_t *pDevice);
/*!
 * @fn 		zbStatus_t ZCL_ApplianceStatisticsClusterClient(zbApsdeDataIndication_t *pIndication, afDeviceDef_t *pDevice)
 *
 * @brief	Processes the requests received on the ApplianceStatistics Cluster Client. 
 *
 */
zbStatus_t ZCL_ApplianceStatisticsClusterClient(zbApsdeDataIndication_t *pIndication, afDeviceDef_t *pDevice);
/*!
 * @fn 		zbStatus_t zclApplianceStatistics_LogRequest(zclApplianceStatistics_LogReq_t *pReq) 
 *
 * @brief	Sends over-the-air a LogRequest command from the Appliance Statistics Cluster Client. 
 *
 */
zbStatus_t zclApplianceStatistics_LogRequest(zclApplianceStatistics_LogReq_t *pReq); 
/*!
 * @fn 		zbStatus_t zclApplianceStatistics_LogQueueReq(zclApplianceStatistics_LogQueueReq_t *pReq) 
 *
 * @brief	Sends over-the-air a LogQueueRequest command from the Appliance Statistics Cluster Client.
 *
 */
zbStatus_t zclApplianceStatistics_LogQueueReq(zclApplianceStatistics_LogQueueReq_t *pReq);
/*!
 * @fn 		zbStatus_t ApplianceStatistics_StatisticsAvailableOrLogQueueResponse(zclApplianceStatistics_LogQueueResponse_t *pReq, uint8_t commandId) 
 *
 * @brief	Sends over-the-air a StatisticAvailable/LogQueueResponse command from the Appliance Statistics Cluster Server.
 *
 */
zbStatus_t ApplianceStatistics_StatisticsAvailableOrLogQueueResponse(zclApplianceStatistics_LogQueueResponse_t *pReq, uint8_t command); 
/*!
 * @fn 		zbStatus_t zclApplianceStatistics_LogRspOrNotif(zclApplianceStatistics_LogRspOrNotif_t *pCommandRsp, uint8_t commandId) 
 *
 * @brief	Sends over-the-air a LogResponse/LogNotification command from the Appliance Statistics Cluster Server.
 *
 */
zbStatus_t zclApplianceStatistics_LogRspOrNotif(zclApplianceStatistics_LogRspOrNotif_t *pReq, uint8_t command); 
/*!
 * @fn 		zbStatus_t Zcl_ApplianceStatistics_UnsolicitedCommandHandler(uint8_t commandId, uint32_t data)
 *
 * @brief   Process ApplianceStatistics Unsolicited command received from external/internal app.
 *
 */
zbStatus_t Zcl_ApplianceStatistics_UnsolicitedCommandHandler(uint8_t commandId,  uint32_t data);
#if gZclEnablePartition_d  
 /*!
 * @fn 		void ZCL_ApplianceStatisticsInit(void)
 *
 * @brief   Init ApplianceStatistic - Partition configuration. In case of messages that will not fit into a single Zigbee payload, 
 *			the Partition Cluster will be used (managed by the application). This function will register the ApllianceStatistics to Partition Cluster.
 *
 */ 
void ZCL_ApplianceStatisticsInit(void);
#endif /* gZclEnablePartition_d */
#endif /* gZclEnableApplianceStatistics_d */

#if gZclEnableApplianceEventsAlerts_d
/*!
 * @fn 		zbStatus_t ZCL_ApplianceEventsAlertsClusterServer(zbApsdeDataIndication_t *pIndication, afDeviceDef_t *pDevice)
 *
 * @brief	Processes the requests received on the Appliance Events and Alerts  Cluster Server. 
 *
 */
zbStatus_t ZCL_ApplianceEventsAlertsClusterServer(zbApsdeDataIndication_t *pIndication,afDeviceDef_t *pDevice);
/*!
 * @fn 		zbStatus_t ZCL_ApplianceEventsAlertsClusterClient(zbApsdeDataIndication_t *pIndication, afDeviceDef_t *pDevice)
 *
 * @brief	Processes the requests received on the Appliance Events and Alerts  Cluster Client. 
 *
 */
zbStatus_t ZCL_ApplianceEventsAlertsClusterClient(zbApsdeDataIndication_t *pIndication,afDeviceDef_t *pDevice);
/*!
 * @fn 		zbStatus_t zclApplianceEventsAlerts_GetAlerts(zclApplianceEventsAlerts_GetAlerts_t *pReq) 
 *
 * @brief	Sends over-the-air a GetAlerts command  from the Appliance Events and Alerts Cluster Client. 
 *
 */
zbStatus_t zclApplianceEventsAlerts_GetAlerts(zclApplianceEventsAlerts_GetAlerts_t *pReq);
/*!
 * @fn 		zbStatus_t zclApplianceEventsAlerts_GetAlertsRspOrNotif(zclApplianceEventsAlerts_GetAlertsRsp_t *pCommandRsp, uint8_t commandId) 
 *
 * @brief	Sends over-the-air a GetAlertsRespone/AlertNotification command  from the Appliance Events and Alerts Cluster Server. 
 *
 */
zbStatus_t zclApplianceEventsAlerts_GetAlertsRspOrNotif(zclApplianceEventsAlerts_GetAlertsRsp_t *pCommandRsp, uint8_t commandId); 
/*!
 * @fn 		zbStatus_t zclApplianceEventsAlerts_EventNotif(zclApplianceEventsAlerts_EventNotif_t *pCommandRsp) 
 *
 * @brief	Sends over-the-air an EventNotification command  from the Appliance Events and Alerts Cluster Server. 
 *
 */
zbStatus_t zclApplianceEventsAlerts_EventNotif(zclApplianceEventsAlerts_EventNotif_t *pCommandRsp);
#if gZclEnableApplianceEventsAlertsUnsolicitedCmd_d
/*!
 * @fn 		zbStatus_t Zcl_ApplianceEventsAlerts_UnsolicitedCommandHandler(uint8_t commandId, bool_t state, uint32_t data)
 *
 * @brief   Process ApplianceEvents and Alerts Unsolicited command received from external/internal app.
 *
 */
zbStatus_t Zcl_ApplianceEventsAlerts_UnsolicitedCommandHandler(uint8_t commandId, bool_t state, uint32_t data);
#endif /* gZclEnableApplianceEventsAlertsUnsolicitedCmd_d */
#endif /* gZclEnableApplianceEventsAlerts_d */

#if gZclEnableApplianceIdentification_d
/*!
 * @fn 		zbStatus_t ZCL_ApplianceIdentificationClusterServer(zbApsdeDataIndication_t *pIndication, afDeviceDef_t *pDevice)
 *
 * @brief	Processes the requests received on the Appliance Identification Cluster Server. 
 *
 */
zbStatus_t ZCL_ApplianceIdentificationClusterServer(zbApsdeDataIndication_t *pIndication,afDeviceDef_t *pDevice);
/*!
 * @fn 		zbStatus_t ZCL_ApplianceIdentificationClusterClient(zbApsdeDataIndication_t *pIndication, afDeviceDef_t *pDevice)
 *
 * @brief	Processes the requests received on the Appliance Identification Cluster Client. 
 *
 */
zbStatus_t ZCL_ApplianceIdentificationClusterClient(zbApsdeDataIndication_t *pIndication,afDeviceDef_t *pDevice);
#endif /* gZclEnableApplianceIdentification_d */

#if gZclEnableMeterIdentification_d
/*!
 * @fn 		zbStatus_t ZCL_MeterIdentificationClusterServer(zbApsdeDataIndication_t *pIndication, afDeviceDef_t *pDevice)
 *
 * @brief	Processes the requests received on the Meter Identification Cluster Server. 
 *
 */
zbStatus_t ZCL_MeterIdentificationClusterServer(zbApsdeDataIndication_t *pIndication,afDeviceDef_t *pDevice);
/*!
 * @fn 		zbStatus_t ZCL_MeterIdentificationClusterClient(zbApsdeDataIndication_t *pIndication, afDeviceDef_t *pDevice)
 *
 * @brief	Processes the requests received on the Meter Identification Cluster Client. 
 *
 */
zbStatus_t ZCL_MeterIdentificationClusterClient(zbApsdeDataIndication_t *pIndication,afDeviceDef_t *pDevice);
#endif /* gZclEnableMeterIdentification_d */

#endif
