/*! @file 	ZclSEMDUPairing.h
 *
 * @brief	Types, definitions and prototypes for the MDU Pairing cluster implementation.
 *
 * @copyright Copyright(c) 2013, Freescale, Inc. All rights reserved.
 *
 * @license	Redistribution and use in source and binary forms, with or without modification,
 *			are permitted provided that the following conditions are met:
 *
 *			o Redistributions of source code must retain the above copyright notice, this list
 *			of conditions and the following disclaimer.
 *
 *			o Redistributions in binary form must reproduce the above copyright notice, this
 *   		list of conditions and the following disclaimer in the documentation and/or
 *   		other materials provided with the distribution.
 *
 *			o Neither the name of Freescale Semiconductor, Inc. nor the names of its
 *   		contributors may be used to endorse or promote products derived from this
 *   		software without specific prior written permission.
 *
 *			THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * 			ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * 			WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * 			DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
 * 			ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * 			(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * 			LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * 			ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * 			(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * 			SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef _ZCLSEMDUPAIRING_H
#define _ZCLSEMDUPAIRING_H

/******************************************************************************
*******************************************************************************
* Public Macros
*******************************************************************************
******************************************************************************/

  /* [R1] D.15.2.3 Commands Generated by Server */
#define gZclCmdMDUPairing_PairingRsp_c                0x00    /* O */
  
/* [R1] D.15.2.3 Commands Generated by Client */
#define gZclCmdMDUPairing_PairingReq_c                0x00    /* M */

#define gZclMDUPairing_InvalidPairingVersion_c  0x00000000

/************************************************************************************
*************************************************************************************
* Public type definitions
*************************************************************************************
************************************************************************************/

/* [R1] D.15.2.3.1 Pairing Response Command */
typedef PACKED_STRUCT zclCmdMDUPairing_PairingRsp_tag 
{
   uint32_t                     pairInfoVersion;
   uint8_t                      totalNoDev;
   zclCmdIdxTotalNumCmd_t       cmdIdxNumCmd;
   zbIeeeAddr_t                 aDeviceList[1];
}zclCmdMDUPairing_PairingRsp_t; 

typedef PACKED_STRUCT zclMDUPairing_PairingRsp_tag 
{
   afAddrInfo_t                   addrInfo;
   uint8_t                        zclTransactionId;
   zclCmdMDUPairing_PairingRsp_t  cmdFrame;
}zclMDUPairing_PairingRsp_t; 

/* [R1] D.15.3.3.1 Pairing Request Command */
typedef PACKED_STRUCT zclCmdMDUPairing_PairingReq_tag 
{
   uint32_t                     pairInfoVersion;
   zbIeeeAddr_t                 aExtAddress;
}zclCmdMDUPairing_PairingReq_t; 

typedef PACKED_STRUCT zclMDUPairing_PairingReq_tag 
{
   afAddrInfo_t                   addrInfo;
   uint8_t                        zclTransactionId;
   zclCmdMDUPairing_PairingReq_t  cmdFrame;
}zclMDUPairing_PairingReq_t; 

typedef PACKED_STRUCT zclMDUPairing_AddVHAN_tag 
{
  index_t                      iVHANidx;
  uint8_t                      devCount;
  zbIeeeAddr_t                 aDeviceList[1];
}zclMDUPairing_AddVHAN_t; 

typedef PACKED_STRUCT zclMDUPairing_UpdateVHAN_tag 
{
  index_t                      iVHANidx;
  uint8_t                      devCount;
  zbIeeeAddr_t                 aDeviceList[1];
}zclMDUPairing_UpdateVHAN_t; 

/* PACKED_STRUCTure of an entry in the MDU Pairing Table*/
typedef PACKED_STRUCT zclMDUPairing_MDUEntry_tag 
{
  index_t                      iVHANidx;
  uint32_t                     pairInfoVersion;
  uint8_t                      devCount;
  zbIeeeAddr_t                 aDeviceList[gNumOfVirtualHANDevices_c];
}zclMDUPairing_MDUEntry_t; 

/* PACKED_STRUCTure used to store response status information between OTA messages */
typedef PACKED_STRUCT zclSendPairingRspInfo_tag
{  
  afAddrInfo_t                addrInfo; 
  uint8_t                       zclTransactionId;
  zclCmdIdxTotalNumCmd_t        cmdIdxTotalNumCmd;
  index_t                       iVHANidx;
  index_t                       iNextDevIdx;
} zclSendPairingRspInfo_t;

/************************************************************************************
*************************************************************************************
* Public prototypes
*************************************************************************************
************************************************************************************/

/*!
 * @fn 		zbStatus_t ZCL_MDUPairingServer(zbApsdeDataIndication_t *pIndication, afDeviceDef_t *pDev) 
 *
 * @brief	Processes the requests received on the MDU Pairing server. 
 *
 */
zbStatus_t ZCL_MDUPairingServer(zbApsdeDataIndication_t *pIndication, afDeviceDef_t *pDevice);

/*!
 * @fn 		zbStatus_t ZCL_MDUPairingClient(zbApsdeDataIndication_t *pIndication, afDeviceDef_t *pDev) 
 *
 * @brief	Processes the requests received on the MDU Pairing client. 
 *
 */
zbStatus_t ZCL_MDUPairingClient(zbApsdeDataIndication_t *pIndication, afDeviceDef_t *pDevice);

/*!
 * @fn 		zbStatus_t zclMDUPairing_PairingReq(zclMDUPairing_PairingReq_t *pReq)
 *
 * @brief	Sends over-the-air a Pairing Request frame from the MDU Pairing client.
 *
 */
zbStatus_t zclMDUPairing_PairingReq(zclMDUPairing_PairingReq_t *pReq);

/*!
 * @fn 		zbStatus_t zclMDUPairing_PairingRsp(zclMDUPairing_PairingRsp_t *pReq, uint8_t numAddresses)
 *
 * @brief	Sends over-the-air a Pairing Response frame from the MDU Pairing server.
 *
 */
zbStatus_t zclMDUPairing_PairingRsp(zclMDUPairing_PairingRsp_t *pReq, uint8_t numAddresses);

/*!
 * @fn 		zbStatus_t zclMDUPairing_AddVHAN(zclMDUPairing_AddVHAN_t *pReq)
 *
 * @brief	Adds a Virtual HAN to the MDU PairingTable.
 *
 */
zbStatus_t zclMDUPairing_AddVHAN(zclMDUPairing_AddVHAN_t *pReq);

/*!
 * @fn 		zbStatus_t zclMDUPairing_UpdateVHAN(zclMDUPairing_UpdateVHAN_t *pReq)
 *
 * @brief	Updates a Virtual HAN from the MDU PairingTable.
 *
 */
zbStatus_t zclMDUPairing_UpdateVHAN(zclMDUPairing_UpdateVHAN_t *pReq);

/*!
 * @fn 		zbStatus_t zclMDUPairing_DeleteVHANs(void)
 *
 * @brief	Deletes all Virtual HAN from the MDU PairingTable.
 *
 */
zbStatus_t zclMDUPairing_DeleteVHANs(void);

/*!
 * @fn 		zclMDUPairing_MDUEntry_t* zclMDUPairing_GetVHANDevices(void)
 *
 * @brief	Gets all devices from a Virtual HAN.
 *
 */
zclMDUPairing_MDUEntry_t* zclMDUPairing_GetVHANDevices(void);

/*!
 * @fn 		zbStatus_t ZCL_HandlePairingRsp(void)
 *
 * @brief	Handles received Pairing Response.
 *
 */
zbStatus_t ZCL_HandlePairingRsp(void);

/*******************************************************************************
********************************************************************************
* Public memory declarations
********************************************************************************
*******************************************************************************/



#endif /* _ZCLSEMDUPAIRING_H */
