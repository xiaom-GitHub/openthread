bootloader-uart-xmodem {
  name=UART XMODEM Bootloader
  dir=bootloader-uart-xmodem/
  isc=bootloader-uart-xmodem/bootloader-uart-xmodem.isc
  architecture=efr32~series[1],efm32~series[1]
  Standalone Bootloader for EmberZNet, Thread and Flex protocol stacks,
  using XMODEM-CRC over UART.
}
bootloader-uart-bgapi {
  name=BGAPI UART DFU Bootloader
  dir=bootloader-uart-bgapi/
  isc=bootloader-uart-bgapi/bootloader-uart-bgapi.isc
  architecture=efr32~series[1]
  Standalone Bootloader for the BLE protocol stack,
  using the BGAPI protocol for UART DFU.
}
bootloader-spi-ezsp {
  name=EZSP SPI Bootloader
  dir=bootloader-spi-ezsp/
  isc=bootloader-spi-ezsp/bootloader-spi-ezsp.isc
  architecture=efr32~series[1]
  Standalone Bootloader for EmberZNet, Thread and Flex protocol stacks,
  using EZSP over SPI.
}
bootloader-storage-spiflash {
  name=SPI Flash Storage Bootloader (multiple images)
  dir=bootloader-storage-spiflash/
  isc=bootloader-storage-spiflash/bootloader-storage-spiflash.isc
  architecture=efr32~series[1],efm32~series[1]
  Application Bootloader for all Wireless protocol stacks, using an external
  SPI flash to store upgrade images received OTA by the application. This sample configuration supports storing multiple firmware update images simultaneously
  by configuring multiple storage slots.
}
bootloader-storage-spiflash-single {
  name=SPI Flash Storage Bootloader (single image)
  dir=bootloader-storage-spiflash-single/
  isc=bootloader-storage-spiflash-single/bootloader-storage-spiflash-single.isc
  architecture=efr32~series[1],efm32~series[1]
  Application Bootloader for all Wireless protocol stacks, using an external
  SPI flash to store upgrade images received OTA by the application. This sample configuration supports storing a single firmware update image at a time, and
  is plug-and-play compatible with the default configuration of the OTA Client
  in Zigbee sample applications.
}
bootloader-storage-internal {
  name=Internal Storage Bootloader (multiple images)
  dir=bootloader-storage-internal/
  isc=bootloader-storage-internal/bootloader-storage-internal.isc
  architecture=efr32~series[1],efm32~series[1]
  Application Bootloader for all Wireless protocol stacks, using internal
  flash to store upgrade images received OTA by the application. This sample
  configuration supports storing multiple firmware update images simultaneously
  by configuring multiple storage slots. The storage layout is designed for
  1024 kB EFR32xG12 devices, and the layout of the storage should be modified
  before being run on other devices.
}
bootloader-storage-internal-single {
  name=Internal Storage Bootloader (single image on 1MB device)
  dir=bootloader-storage-internal-single/
  isc=bootloader-storage-internal-single/bootloader-storage-internal-single.isc
  architecture=efr32~series[1],efm32~series[1]
  Application Bootloader for all Wireless protocol stacks, using internal
  flash to store upgrade images received OTA by the application. This sample
  configuration supports storing a single firmware update image at a time, and
  is plug-and-play compatible with the "Local Storage Bootloader" configuration
  of EmberZNet, Silicon Labs Thread and Flex sample applications on 1024 kB
  EFR32xG12 devices. The layout of the storage should be modified before being
  run on other devices.
}
bootloader-storage-internal-single-512k {
  name=Internal Storage Bootloader (single image on 512kB device)
  dir=bootloader-storage-internal-single-512k/
  isc=bootloader-storage-internal-single-512k/bootloader-storage-internal-single-512k.isc
  architecture=efr32~series[1]
  Application Bootloader for all Wireless protocol stacks, using internal
  flash to store upgrade images received OTA by the application. This sample
  configuration supports storing a single firmware update image at a time, and
  is plug-and-play compatible with the "Local Storage Bootloader" configuration
  of EmberZNet, Silicon Labs Thread and Flex sample applications on 512 kB
  EFR32xG13 devices. The layout of the storage should be modified before being
  run on other devices.
}
bootloader-storage-internal-ble {
  name=Bluetooth in-place OTA DFU Bootloader
  dir=bootloader-storage-internal-ble/
  isc=bootloader-storage-internal-ble/bootloader-storage-internal-ble.isc
  architecture=efr32~series[1]~device_configuration[1]~family[B],efr32~series[1]~device_configuration[1]~family[M]
  Application Bootloader for in-place OTA DFU with the Bluetooth stack on
  EFR32BG1/MG1, using internal flash to store stack and app upgrade images received
  OTA in a two-stage process. This sample bootloader is designed for use with
  EFR32BG1/MG1 (256kB flash) only.
}
